import psycopg2
import psycopg2.extras
import pandas as pd
import logger
import os

DB_HOST=os.environ['DB_HOST']
DB_PORT=os.environ['DB_PORT']
DB_DB=os.environ['DB_DB']
DB_USERNAME=os.environ['DB_USERNAME']
DB_PASSWORD=os.environ['DB_PASSWORD']

LOGGER = logger.get_logger(__name__)
LOGGER.info(f'attemting connenction to db...')
LOGGER.info(
        f"dbname='{DB_DB}' user='{DB_USERNAME}' host='{DB_HOST}' port='{DB_PORT}' password='{DB_PASSWORD}'"
        )

SCHEMA ="""
train_data (
    id              bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    timestamp       bigint NOT NULL,
    elvira_id       varchar(200) NOT NULL,
    relation        varchar(400) NOT NULL,
    train_number    varchar(200) NOT NULL,
    lat             real NULL,
    lon             real NOT NULL,
    line_kind       varchar(200) NOT NULL,
    line            varchar(200),
    delay           real NOT NULL,
    delay_cause     varchar(400)
);
"""
conn = psycopg2.connect(
        f"dbname='{DB_DB}' user='{DB_USERNAME}' host='{DB_HOST}' port='{DB_PORT}' password='{DB_PASSWORD}'"
        )

def save_dataframe(df):
    _create_table_if_not_exists(SCHEMA)
    _insert_into_table(df,'train_data')

def _insert_into_table(df, table):
        if len(df) > 0:
            df_columns = list(df)
            # create (col1,col2,...)
            columns = ",".join(df_columns)

            # create VALUES('%s', '%s",...) one '%s' per column
            values = "VALUES({})".format(",".join(["%s" for _ in df_columns])) 

            #create INSERT INTO table (columns) VALUES('%s',...)
            insert_stmt = "INSERT INTO {} ({}) {}".format(table,columns,values)

            try:
                cur = conn.cursor()
                psycopg2.extras.execute_batch(cur, insert_stmt, df.values)
                conn.commit()
                cur.close()

            except (Exception, psycopg2.DatabaseError) as error:
                df['error'] = str(error).replace(' ','-').lower()
                df.to_csv(f'fault-{error}.csv')
                LOGGER.error(error)
                conn.rollback()

def _create_table_if_not_exists(schema):
    query = f'CREATE TABLE IF NOT EXISTS {schema}'
    try:
        cur = conn.cursor()
        cur.execute(query)
        conn.commit()
        cur.close()

    except (Exception, psycopg2.DatabaseError) as error:
        LOGGER.error(error)
        conn.rollback()
